// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 使用 Prisma 的生成器 (generator) 來產生 Prisma 客戶端程式碼
generator client {
  // "prisma-client-js"是用於 JavaScript 的 Prisma 客戶端
  provider = "prisma-client-js"
}

// 定義資料來源(datasource)，名為 "db"
datasource db {
  // 將provider改為mongodb
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_DATABASE_URL")
}

// 模型關係思考邏輯:
// 沒有上下分別，彼此互相儲存對方ids
// 多(產品)對多(尺寸): 產品有多個尺寸與顏色，而尺寸與顏色也可以用在其他產品

// 有上下分別，主模型儲存子模型，子模型登記主模型id
// 一(產品)對多(照片): 產品可以有多個照片，但是照片只能用在單一個產品上
// 一(帳號)對一(個人資料): 一個帳號只能有一筆個人資料，而個人資料也只能一個帳號
model Store {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 用來儲存哪一個用戶建立的
  userId String
  name String

  // 儲存該模型的多筆資料
  billboards Billboard[]
  categories Category[]
  sizes Size[]
  colors Color[]
  products Product[]
  orders Order[]
}

model Billboard {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  imageUrl String

  // 儲存該模型的單筆資料id
  // 藉由該模型的id，關聯到該模型的資料
  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  imageUrl String

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // 儲存該模型的多筆資料
  products Product[]
}

model Size {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  value String

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  productIds String[] @db.ObjectId
  products Product[] @relation(fields: [productIds], references: [id])
}

model Color {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  value String

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])

  productIds String[] @db.ObjectId
  products Product[] @relation(fields: [productIds], references: [id])
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  // Decimal用於儲存精確的十進制數值，但只限於MySQL資料庫，前端使用時需要加上.toNumber()來轉換
  // 因javascript的數字類型是浮點數

  // Int: 整數、Float: 浮點數
  price Float
  // 已上架
  isFeatured Boolean @default(false)
  // 已下架歸檔
  isArchived Boolean @default(false)

  // 多對一
  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])
  categoryId String @db.ObjectId
  category Category @relation(fields: [categoryId], references: [id])

  // 多對多
  // 儲存該模型的多筆資料id
  // 藉由該模型的id，關聯到該模型的資料
  sizeIds String[] @db.ObjectId
  sizes Size[] @relation(fields: [sizeIds], references: [id])
  colorIds String[] @db.ObjectId
  colors Color[] @relation(fields: [colorIds], references: [id])

  // 一對多
  images Image[]
}

// 產品的照片
model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imageUrl String @unique

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// 訂單
model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  email String
  phone String @default("")
  address String @default("")
  isPaid Boolean @default(false)

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])

  orderItems OrderItem[]
}

// 訂單內購買項目
model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  name String
  size String
  color String
  price Float
  amount Int

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}